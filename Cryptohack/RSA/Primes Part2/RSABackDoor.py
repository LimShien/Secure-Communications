"""
It seems like my method to generate fast primes was not completely secure. I came up with a new approach to improve security, including a factorization backdoor in case I ever lose my private key. You'll definitely need some complex techniques to break this! 

--q is random, p is generated from complex formula


4p-1 = (D*s)^2   from I want to break square-free: The 4pâˆ’1factorization method and its RSA backdoor viability


QICHENG -> CM FACTOR

"""
#!/usr/bin/env python3 

import random
from Crypto.Util.number import bytes_to_long, getPrime, isPrime, long_to_bytes
from math import gcd,sqrt
from Crypto.Cipher import PKCS1_OAEP
from Crypto.PublicKey import RSA
from Crypto.Util.number import GCD,inverse
import gmpy2


FLAG = b"crypto{????????????????????????????????}"

"""
def get_complex_prime():
    D = 427
    while True:
        s = random.randint(2 ** 1020, 2 ** 1021 - 1)  ## randint(2^n, 2^(n+1) -1) 
        tmp = D * s ** 2 + 1   ##tmp = 427 * s^2  + 1
        if tmp % 4 == 0 and isPrime((tmp // 4)):
            return tmp // 4


m = bytes_to_long(FLAG)
p = get_complex_prime()
q = getPrime(2048)
n = p * q
e = 65537
c = pow(m, e, n)

m = pow(c, d, n)
"""

n = 709872443186761582125747585668724501268558458558798673014673483766300964836479167241315660053878650421761726639872089885502004902487471946410918420927682586362111137364814638033425428214041019139158018673749256694555341525164012369589067354955298579131735466795918522816127398340465761406719060284098094643289390016311668316687808837563589124091867773655044913003668590954899705366787080923717270827184222673706856184434629431186284270269532605221507485774898673802583974291853116198037970076073697225047098901414637433392658500670740996008799860530032515716031449787089371403485205810795880416920642186451022374989891611943906891139047764042051071647203057520104267427832746020858026150611650447823314079076243582616371718150121483335889885277291312834083234087660399534665835291621232056473843224515909023120834377664505788329527517932160909013410933312572810208043849529655209420055180680775718614088521014772491776654380478948591063486615023605584483338460667397264724871221133652955371027085804223956104532604113969119716485142424996255737376464834315527822566017923598626634438066724763559943441023574575168924010274261376863202598353430010875182947485101076308406061724505065886990350185188453776162319552566614214624361251463
e = 65537
c = 6084846173161381264432756605240263025508135383745665175433229598517433030003704261658172582370543758277685547533834085899541036156595489206369279739210904154716464595657421948607569920498815631503197235702333017824993576326860166652845334617579798536442066184953550975487031721085105757667800838172225947001224495126390587950346822978519677673568121595427827980195332464747031577431925937314209391433407684845797171187006586455012364702160988147108989822392986966689057906884691499234298351003666019957528738094330389775054485731448274595330322976886875528525229337512909952391041280006426003300720547721072725168500104651961970292771382390647751450445892361311332074663895375544959193148114635476827855327421812307562742481487812965210406231507524830889375419045542057858679609265389869332331811218601440373121797461318931976890674336807528107115423915152709265237590358348348716543683900084640921475797266390455366908727400038393697480363793285799860812451995497444221674390372255599514578194487523882038234487872223540513004734039135243849551315065297737535112525440094171393039622992561519170849962891645196111307537341194621689797282496281302297026025131743423205544193536699103338587843100187637572006174858230467771942700918388

#print((2 ** 1020)== (2 ** 1021 - 1))

##generated with RSACTFTool

with open("/home/kali/College/Secure-Communications/Cryptohack/RSA/Primes Part2/RSABackdoorPK.pem") as f:
    key = RSA.importKey(f.read())

#print(key.d)

d = key.d
p = key.p

print(long_to_bytes(pow(c, d,n)))
##c = pow(m, e, n)

sageresult = int(
subprocess.check_output(
["sage", "%s/sage/qicheng.sage" % rootpath, str(publickey.n)],
timeout=attack_rsa_obj.args.timeout,
stderr=subprocess.DEVNULL,
)
)